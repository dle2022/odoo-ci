name: Backup Odoo

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Which environment to back up"
        type: choice
        options: [production, staging]
        default: production

jobs:
  backup:
    # pin to the right runner; keep labels that match your real hosts
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && inputs.target == 'staging')
                && 'self-hosted,staging' || 'self-hosted,production' }}
    # attach GH Environment so you can scope secrets
    environment: ${{ (github.event_name == 'workflow_dispatch' && inputs.target) || 'production' }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      # Rehydrate the correct env file into the workspace.
      - name: Rehydrate env file
        run: |
          set -euo pipefail
          if [[ "${{ inputs.target || 'production' }}" == "staging" ]]; then
            echo "${{ secrets.ENV_STAGING_B64 }}" | base64 -d > .env.staging
            ln -sf .env.staging .env.selected
          else
            echo "${{ secrets.ENV_PROD_B64 }}" | base64 -d > .env.prod
            ln -sf .env.prod .env.selected
          fi
          ls -la .env.*

      - name: Preflight (containers & filestore path)
        run: |
          set -euo pipefail
          source ./.env.selected
          echo "APP_CONT=$APP_CONT"
          echo "DB_CONT=$DB_CONT"
          echo "DB_NAME=$DB_NAME"
          echo "FILESTORE_IN_APP=$FILESTORE_IN_APP"
          echo "Docker containers on this runner:"
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
          echo "Check filestore in app container:"
          docker exec "$APP_CONT" bash -lc "ls -ld '${FILESTORE_IN_APP}' || true"
          docker exec "$APP_CONT" bash -lc "du -sh '${FILESTORE_IN_APP}' || true"
          docker exec "$APP_CONT" bash -lc "find '${FILESTORE_IN_APP}' -type f | head -10 || true"

      - name: Run backup
        id: dobackup
        run: |
          set -euo pipefail
          chmod +x scripts/backup_docker.sh
          SHORT=prod
          if [[ "${{ inputs.target || 'production' }}" == "staging" ]]; then SHORT=staging; fi
          OUT=$(./scripts/backup_docker.sh "$SHORT" | awk -F= '/^BACKUP_PATH=/{print $2}')
          echo "path=$OUT" >> "$GITHUB_OUTPUT"
          echo "Created: $OUT"

      # Optional artifact (leave off for large DBs)
      - name: Upload backup artifact
        if: ${{ false }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.target || 'production' }}-backup
          path: ${{ steps.dobackup.outputs.path }}
